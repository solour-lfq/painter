多项式向Sigmoid回归

目标函数：
	Sigmoid
	
基函数：
	x^{0},...x^{5}
	
拟合区间：
	-5.0 ~ 5.0, delta = 0.2, 噪声方差 = 0.1
	
训练结果：
	float f(float x)
	{
		return ((1) * 0.047666814 +
				(x) * 0.39250335 +
				(x * x) * -0.012192107 +
				(x * x * x) * -0.0086557977 +
				(x * x * x * x) * 0.0004694747);
	}
	
模型代码：
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <iostream>
using namespace cv;
using namespace std;

int main()
{
	//Phi为设计矩阵
	Mat Phi(51, 5, CV_32F, Scalar::all(0));
	for (int i = 0; i < 51; ++i)
		for (int j = 0; j < 5; ++j)
			Phi.at< Vec<float, 1> >(i, j) = ((j == 0) ? 1 : ((Phi.at< Vec<float, 1> >(i, j - 1)) * (0.2 * i - 5.0)));
	Mat Phi_t = Phi.t();
	Mat m1 = Phi_t * Phi;
	Mat m2 = m1.inv();
	Mat m3 = m2 * Phi_t;
	Mat t = (Mat_<float>(1, 51) << -0.826455, -1.13357, -0.96262, -0.963817, -1.00065, -0.918209, -0.937339, -0.907309, -1.17239, -0.917249, -0.971597, -0.948977, -0.878848, -0.660528, -0.876984, -0.691279, -0.701763, -0.65467, -0.483956, -0.510948, -0.531313, -0.211806, -0.361515, -0.179856, -0.0722509, -0.0863065, 0.218291, 0.329029, 0.359416, 0.474205, 0.544954, 0.478078, 0.625278, 0.750082, 0.74574, 0.714907, 0.633621, 0.82048, 1.01939, 0.80618, 0.812917, 0.816939, 0.891213, 1.04234, 0.952998, 0.965056, 1.06243, 0.775332, 0.998139, 0.983268, 1.01948);
	//上为训练集中的t
	Mat tt = t.t();
	Mat w = m3 * tt;
	cout << w << endl;
}
